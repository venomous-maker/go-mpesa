package Services

import (
	"encoding/base64"
	"errors"
	_ "fmt"
	"github.com/venomous-maker/go-mpesa/Abstracts"
	"regexp"
	"strings"
	"time"
)

// BaseService provides common functionality shared across all M-Pesa service implementations.
// It includes utility methods for timestamp generation, password creation, and phone number formatting.
type BaseService struct {
	Config *Abstracts.MpesaConfig   // M-Pesa configuration containing credentials and settings
	Client Abstracts.MpesaInterface // HTTP client interface for making API requests
}

// NewBaseService creates a new base service instance with the provided configuration and client.
// This is the foundational service that other M-Pesa services extend from.
//
// Parameters:
//   - cfg: M-Pesa configuration containing credentials and settings
//   - client: HTTP client interface for making API requests
//
// Returns:
//   - *BaseService: A configured base service with common M-Pesa functionality
//
// Example:
//
//	cfg := createMpesaConfig()
//	client := Abstracts.NewApiClient(cfg)
//	baseService := NewBaseService(cfg, client)
func NewBaseService(cfg *Abstracts.MpesaConfig, client Abstracts.MpesaInterface) *BaseService {
	return &BaseService{
		Config: cfg,
		Client: client,
	}
}

// GenerateTimestamp returns the current timestamp in M-Pesa required format.
// The timestamp is formatted as "YmdHis" (YYYYMMDDHHMMSS) which is required
// for M-Pesa API authentication and transaction processing.
//
// Returns:
//   - string: Current timestamp in "20060102150405" format
//
// Example:
//
//	timestamp := baseService.GenerateTimestamp()
//	// Returns: "20240812143022" (for Aug 12, 2024 at 14:30:22)
func (b *BaseService) GenerateTimestamp() string {
	return time.Now().Format("20060102150405")
}

// GeneratePassword creates a base64-encoded password for M-Pesa API authentication.
// The password is generated by concatenating business shortcode, passkey, and current timestamp,
// then encoding the result in base64. This password is required for STK Push and other operations.
//
// Returns:
//   - string: Base64-encoded password for API authentication
//
// Example:
//
//	password := baseService.GeneratePassword()
//	// Returns: "MTc0Mzc5YmZiMjc5ZjlhYTliZGJjZjE1OGU5N2RkNzFhNDY3Y2QyZTBjODkzMDU5YjEwZjc4ZTZiNzJhZGExZWQyYzkxOTIwMjQwODEyMTQzMDIy"
func (b *BaseService) GeneratePassword() string {
	timestamp := b.GenerateTimestamp()
	plain := b.Config.GetBusinessCode() + b.Config.GetPassKey() + timestamp
	return base64.StdEncoding.EncodeToString([]byte(plain))
}

// CleanPhoneNumber formats and validates a phone number for M-Pesa API compatibility.
// The method accepts various phone number formats and converts them to the standard
// international format required by M-Pesa APIs.
//
// Parameters:
//   - phone: The phone number in various formats (0711223344, 254711223344, +254711223344)
//   - countryCode: The country code to use for local numbers (e.g., "254" for Kenya)
//
// Returns:
//   - string: The cleaned and formatted phone number in international format
//   - error: An error if the phone number is invalid or cannot be formatted
//
// Example:
//
//	// Various input formats
//	cleaned, err := baseService.CleanPhoneNumber("0711223344", "254")    // Returns: "254711223344"
//	cleaned, err := baseService.CleanPhoneNumber("254711223344", "254")  // Returns: "254711223344"
//	cleaned, err := baseService.CleanPhoneNumber("+254711223344", "254") // Returns: "254711223344"
//
//	if err != nil {
//	    log.Printf("Invalid phone number: %v", err)
//	    return
//	}
func (b *BaseService) CleanPhoneNumber(phone, countryCode string) (string, error) {
	if strings.TrimSpace(phone) == "" {
		return "", errors.New("phone number cannot be empty")
	}

	phone = strings.TrimSpace(phone)

	if len(phone) < 9 {
		return "", errors.New("phone number is too short")
	}

	if strings.HasPrefix(phone, "+") {
		// Remove leading '+' and non-digit characters
		return regexp.MustCompile(`\D`).ReplaceAllString(phone[1:], ""), nil
	}

	if strings.HasPrefix(phone, "0") {
		// Replace leading 0 with country code
		return countryCode + regexp.MustCompile(`\D`).ReplaceAllString(phone[1:], ""), nil
	}

	// Clean all non-digit characters
	return regexp.MustCompile(`\D`).ReplaceAllString(phone, ""), nil
}
